class DSU:
    def __init__(self, N):
        self.p = list(range(N))
        self.rank = [1] * N # no of components
        
    def find(self, x):
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        if xr == yr: return 
        if self.rank[xr] > self.rank[yr]:
            self.p[yr] = xr
            self.rank[xr] += self.rank[yr]
            self.rank[yr] = 0
        else:
            self.p[xr] = yr
            self.rank[yr] += self.rank[xr]
            self.rank[xr] = 0

    def get_no_components(self, x):
        xr = self.find(x)
        return self.rank[xr]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        dsu = DSU(N)
        malware = set(initial)
        clean = [i for i in range(N) if i not in malware]
        for i, j in product(clean, clean):
            if i != j and graph[i][j]:
                dsu.union(i, j)

        health_to_malware = defaultdict(set)
        malware_to_health = defaultdict(set)
        # check malware count per healthy components
        for i, j in product(clean, malware):
            if graph[i][j]:
                component = dsu.find(i)
                health_to_malware[component].add(j)
                malware_to_health[j].add(component)

        # print(f"{health_to_malware=}")
        # print(f"{malware_to_health=}")
        # print(f"{dsu.p=}")
        # print(f"{dsu.rank=}")
        # if max(initial) >31:
        #     print(f"{dsu.get_no_components(1)=}")
        #     print(f"{dsu.get_no_components(32)=}")

        max_id, max_amount = min(initial), 0
        for key, value in malware_to_health.items():
            # print(key, [health_to_malware[v] for v in value])
            valid_healthy_components = [v for v in value if len(health_to_malware[v]) == 1]
            cand_total = sum([dsu.get_no_components(v) for v in valid_healthy_components] + [0])
            # print(f"{key=} {cand_total=} {max_amount=} {value=}")
            if cand_total > max_amount:
                max_id = key
                max_amount = cand_total
            elif cand_total == max_amount and max_id > key:
                max_id = key

        return max_id
        

